---
alwaysApply: true
---

# 最少功能原则 (Minimal Functionality Principle)

## 核心原则

**每次修改或创建代码时，尽可能少写代码，只需要实现当前需要的最少功能即可。**

## 具体指导

### 1. 功能实现原则

- **只实现当前需要的功能**：当用户需要读数据库的功能时，仅实现读功能，禁止添加写功能
- **避免过度设计**：不要为"将来可能需要的功能"编写代码
- **单一职责**：每个函数、类或模块只负责一个明确的功能

### 2. 代码编写规范

#### 数据库操作

- **读取需求**：只实现 SELECT 查询，不添加 INSERT、UPDATE、DELETE
- **写入需求**：只实现必要的写入操作，不添加额外的读取逻辑
- **避免通用化**：不要创建"万能"的数据库操作类

#### API 设计

- **端点设计**：只创建当前需要的 API 端点
- **参数验证**：只验证当前功能必需的参数
- **响应格式**：只返回当前功能需要的数据字段

#### 用户界面

- **组件创建**：只实现当前需要的 UI 元素
- **交互功能**：只添加当前功能必需的交互行为
- **样式设计**：只应用当前功能需要的样式

### 3. 禁止的行为

- ❌ 添加"以防万一"的功能
- ❌ 创建通用的工具类（除非确实需要）
- ❌ 实现"未来可能用到"的接口
- ❌ 添加不必要的配置选项
- ❌ 创建复杂的抽象层（除非当前确实需要）

### 4. 允许的行为

- ✅ 实现当前明确需要的功能
- ✅ 添加必要的错误处理
- ✅ 编写清晰的注释和文档
- ✅ 遵循现有的代码风格和架构
- ✅ 添加必要的测试用例

### 5. 判断标准

在编写代码前，问自己：

1. **这个功能是当前明确需要的吗？**
2. **没有这个功能，当前需求就无法完成吗？**
3. **这个代码是为了解决当前问题，还是为了"将来可能有用"？**

如果答案不是"是"，就不要添加。

### 6. 重构原则

- **当前不需要的功能**：即使代码已经存在，也应该移除
- **简化复杂实现**：如果当前需求可以用更简单的方式实现，选择简单方式
- **移除死代码**：删除不再使用的代码和功能

## 示例

### ❌ 错误示例（过度实现）

```swift
// 用户只需要读取用户信息
class UserService {
    func getUser(id: String) -> User { /* 读取逻辑 */ }
    func createUser(user: User) -> Bool { /* 创建逻辑 - 不需要！ */ }
    func updateUser(user: User) -> Bool { /* 更新逻辑 - 不需要！ */ }
    func deleteUser(id: String) -> Bool { /* 删除逻辑 - 不需要！ */ }
}
```

### ✅ 正确示例（最少功能）

```swift
// 用户只需要读取用户信息
class UserService {
    func getUser(id: String) -> User { /* 只实现读取逻辑 */ }
}
```

## 总结

记住：**代码越少，维护越容易，bug 越少，理解越简单。**

每次编写代码时，都要问自己："这是当前真正需要的吗？"如果不是，就不要写。
