import Foundation
import MagicCore
import OSLog
import SwiftUI

/**
 * ËøúÁ®ãÂõæÊ†á‰ªìÂ∫ì
 * Ë¥üË¥£‰ªéÁΩëÁªúAPIËé∑ÂèñÂõæÊ†áÂàÜÁ±ªÂíåÂõæÊ†áÊï∞ÊçÆ
 * ÂÆûÁé∞ IconSourceProtocol ÂçèËÆÆÔºåÊèê‰æõÁªü‰∏ÄÁöÑÂõæÊ†áÊù•Ê∫êÊé•Âè£
 */
class WebIconRepo: SuperLog, IconSourceProtocol {
    func getAllIcons() async -> [IconAsset] {
        []
    }

    nonisolated static var emoji: String { "üõú" }

    /// Âçï‰æãÂÆû‰æã
    static let shared = WebIconRepo()

    /// ËøúÁ®ãAPIÁöÑÂü∫Á°ÄURL
    private let baseURL: String = "https://gitok.coffic.cn"

    /// ÂõæÊ†áÊ∏ÖÂçïAPIÁ´ØÁÇπ
    private let manifestEndpoint = "/icon-manifest.json"

    /// HTTP Â±ÇÈù¢ÁöÑÁºìÂ≠òÊó∂Èó¥
    private let httpCacheMaxAge: TimeInterval = 60 * 60

    /// ÁßÅÊúâÂàùÂßãÂåñÊñπÊ≥ïÔºåÁ°Æ‰øùÂçï‰æãÊ®°Âºè
    private init() {}

    // MARK: - IconSourceProtocol Implementation

    var sourceIdentifier: String { "gitok_api" }
    var sourceName: String { "ÁΩëÁªúÂõæÊ†áÂ∫ì" }

    var isAvailable: Bool = true

    func getAllCategories(reason: String) async throws -> [IconCategory] {
        os_log(.info, "\(self.t)getAllCategories reason: \(reason)")
        let remoteCategories: [RemoteIconCategory]
        let categories = try await fetchCategoriesFromNetwork()
        remoteCategories = categories

        let mapped = remoteCategories.map { remoteCategory in
            IconCategory(
                id: remoteCategory.id,
                name: remoteCategory.name,
                displayName: remoteCategory.displayName,
                iconCount: remoteCategory.iconCount,
                sourceIdentifier: self.sourceIdentifier,
                metadata: ["remoteIconIds": remoteCategory.remoteIconIds.count]
            )
        }
        return mapped
    }

    func getCategory(byName name: String) async throws -> IconCategory? {
        let categories = try await getAllCategories(reason: "get_category_by_name")
        return categories.first { $0.name == name }
    }

    func getIconAsset(byId iconId: String) async throws -> IconAsset? {
        let categories = try await getAllCategories(reason: "get_icon_by_id")

        for category in categories {
            let icons = await getIcons(for: category.id)
            // ÊîπËøõÂåπÈÖçÈÄªËæëÔºöÊîØÊåÅÂ§öÁßçÂåπÈÖçÊñπÂºè
            if let remoteIcon = icons.first(where: { icon in
                // Á≤æÁ°ÆÂåπÈÖçiconId
                if icon.iconId == iconId {
                    return true
                }
                // Ê®°Á≥äÂåπÈÖçÔºöÊ£ÄÊü•iconIdÊòØÂê¶ÂåÖÂê´Âú®URL‰∏≠
                if let urlString = icon.fileURL?.absoluteString, urlString.contains(iconId) {
                    return true
                }
                // Ê£ÄÊü•URLÁöÑÊúÄÂêé‰∏ÄÈÉ®ÂàÜÔºàÂéªÊéâÊâ©Â±ïÂêçÔºâ
                if let url = icon.fileURL {
                    let lastComponent = url.lastPathComponent
                    let withoutExtension = lastComponent.replacingOccurrences(of: ".svg", with: "")
                        .replacingOccurrences(of: ".png", with: "")
                        .replacingOccurrences(of: ".jpg", with: "")
                        .replacingOccurrences(of: ".jpeg", with: "")
                    if withoutExtension == iconId {
                        return true
                    }
                }
                return false
            }) {
                return remoteIcon
            }
        }

        return nil
    }

    private func fetchCategoriesFromNetwork() async throws -> [RemoteIconCategory] {
        guard let url = URL(string: baseURL + manifestEndpoint) else {
            throw RemoteIconError.invalidURL
        }

        os_log("\(self.t)fetchCategoriesFromNetwork: \(url.absoluteString) with cacheMaxAge: \(self.httpCacheMaxAge)")

        // ‰ΩøÁî®ÊòæÂºè HeaderÔºåÈÅøÂÖç GET Êê∫Â∏¶ Content-TypeÔºõÂêåÊó∂Á¶ÅÁî®ÂéãÁº©‰ª•ÊéíÈô§Ëß£ÂéãÈóÆÈ¢ò
        let headers = [
            "Accept": "application/json",
            "Accept-Encoding": "identity",
            "User-Agent": "GitOK/1.0 (macOS; SwiftURLSession)",
        ]
        let (data, response) = try await url.httpGetData(headers: headers, cacheMaxAge: httpCacheMaxAge)
        let code = response.statusCode
        guard code == 200 else {
            throw RemoteIconError.networkError
        }
        // È¢ÑÊ†°È™åÔºö‰∏çÊòØÂêàÊ≥ïJSONÂàôÁõ¥Êé•ÊäõÈîô
        guard (try? JSONSerialization.jsonObject(with: data)) != nil else {
            throw RemoteIconError.decodingError
        }
        do {
            let manifest = try JSONDecoder().decode(IconManifest.self, from: data)
            return manifest.categories.map { categoryData in
                RemoteIconCategory(
                    id: categoryData.id,
                    name: categoryData.name,
                    displayName: categoryData.name.uppercased(),
                    iconCount: categoryData.count,
                    remoteIconIds: manifest.iconsByCategory[categoryData.id] ?? []
                )
            }
        } catch {
            throw error
        }
    }

    /// Ëé∑ÂèñÊåáÂÆöÂàÜÁ±ªÁöÑÂõæÊ†áÂàóË°®
    /// - Parameter categoryId: ÂàÜÁ±ªID
    /// - Returns: IconAssetÊï∞ÁªÑ
    func getIcons(for categoryId: String) async -> [IconAsset] {
        do {
            return try await fetchIconsFromNetwork(for: categoryId)
        } catch {
            return []
        }
    }

    /// ‰ªéÁΩëÁªúËé∑ÂèñÊåáÂÆöÂàÜÁ±ªÁöÑÂõæÊ†áÊï∞ÊçÆ
    /// - Parameter categoryId: ÂàÜÁ±ªID
    /// - Returns: IconAssetÊï∞ÁªÑ
    /// - Throws: ÁΩëÁªúËØ∑Ê±ÇÈîôËØØ
    private func fetchIconsFromNetwork(for categoryId: String) async throws -> [IconAsset] {
        guard let url = URL(string: baseURL + manifestEndpoint) else {
            throw RemoteIconError.invalidURL
        }
        // ÂêåÊ†∑Ë¶ÜÁõñ HeaderÔºåÈÅøÂÖç GET Êê∫Â∏¶ Content-Type
        let headers = [
            "Accept": "application/json",
            "Accept-Encoding": "identity",
            "User-Agent": "GitOK/1.0 (macOS; SwiftURLSession)",
        ]
        let (data, response) = try await url.httpGetData(headers: headers, cacheMaxAge: httpCacheMaxAge)
        let code = response.statusCode
        guard code == 200 else { throw RemoteIconError.networkError }
        let manifest = try JSONDecoder().decode(IconManifest.self, from: data)
        let categoryIcons = manifest.iconsByCategory[categoryId] ?? []
        os_log(.info, "\(self.t)icons for cat=\(categoryId): \(categoryIcons.count)")
        return categoryIcons.map { iconData in
            let remoteURL = URL(string: baseURL + "/icons/" + iconData.path)!
            return IconAsset(remoteURL: remoteURL)
        }
    }

    // MARK: - ÈîôËØØÁ±ªÂûãÂÆö‰πâ

    enum RemoteIconError: Error {
        case networkError
        case decodingError
        case invalidURL
    }
}

#Preview("App - Small Screen") {
    RootView {
        ContentLayout()
            .setInitialTab(IconPlugin.label)
            .hideSidebar()
            .hideTabPicker()
            .hideProjectActions()
    }
    .frame(width: 650)
    .frame(height: 800)
}

#Preview("App - Big Screen") {
    RootView {
        ContentLayout()
            .setInitialTab(IconPlugin.label)
            .hideSidebar()
            .hideTabPicker()
            .hideProjectActions()
    }
    .frame(width: 800)
    .frame(height: 1200)
}
