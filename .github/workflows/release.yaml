name: Release

on:
  workflow_run:
    workflows:
      - 'Bump'
    types:
      - completed

permissions:
  contents: write

env:
  TAG: ${{ github.sha }}
  SCHEME: GitOK
  DESTINATION: 'generic/platform=macOS'
  ArchivePath: './my-app'
  BuildPath: './temp'
  IS_PRERELEASE: true

jobs:
  build_with_signing:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: macos-15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_branch }}
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'
      - name: 安装依赖
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -fsSL \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'user-agent: GitOK-Release-Workflow' \
            https://raw.githubusercontent.com/nookery/servon/main/install.sh | bash
      - name: Verify Xcode version
        run: |
          echo "Current Xcode version:"
          xcodebuild -version
          echo "Swift version:"
          xcrun swift --version
          echo "Xcode path:"
          xcode-select -p
      - name: 获取最新 tag
        id: get_tag
        run: |
          tag=$(git describe --tags --abbrev=0)
          echo "TAG=$tag" >> $GITHUB_ENV
          if [[ $tag == p* ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
          fi
      - name: Setup macOS signing
        id: signing
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          BUILD_CERTIFICATE_P12_PASSWORD: ${{ secrets.BUILD_CERTIFICATE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64_GITOK_MACOS }}
          APP_STORE_CONNECT_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_KEY_BASE64 }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_KEY_ISSER_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ISSER_ID }}
        run: |
          chmod +x ./scripts/setup-macos-signing.sh
          source ./scripts/setup-macos-signing.sh
          echo "signing_identity=$SIGNING_IDENTITY" >> $GITHUB_OUTPUT
          echo "team_id=$TEAM_ID" >> $GITHUB_OUTPUT
          echo "pp_path=$PP_PATH" >> $GITHUB_OUTPUT
          echo "api_key_path=$API_KEY_PATH" >> $GITHUB_OUTPUT
      - name: Build App
        run: servon xcode build --scheme ${{ env.SCHEME }} --arch arm64 --clean=false
      - name: Codesign App
        run: |
          servon xcode codesign --path ./temp/arm64/Build/Products/Release/${{ env.SCHEME }}.app \
            --identity ${{ steps.signing.outputs.signing_identity }} 

          # servon xcode codesign --path ./temp/x86_64/Build/Products/Release/${{ env.SCHEME }}.app \
          #   --identity ${{ steps.signing.outputs.signing_identity }}
      - name: Create DMG
        run: |
          servon xcode package --path ./temp/arm64/Build/Products/Release/${{ env.SCHEME }}.app
          # servon xcode package --path ./temp/x86_64/Build/Products/Release/${{ env.SCHEME }}.app
      - name: Notary
        continue-on-error: true
        run: |
          file=$(find . -maxdepth 2 -type f -name "*.dmg" | head -n 1)
          xcrun notarytool submit "$file" \
            --key ${{ steps.signing.outputs.api_key_path }} \
            --key-id=${{ secrets.APP_STORE_CONNECT_KEY_ID }} \
            --issuer ${{ secrets.APP_STORE_CONNECT_KEY_ISSER_ID }} \
            --wait \
            --timeout 10m
          stapler staple "$file"
      - name: 公证结果
        continue-on-error: true
        run: |
          file=$(find . -maxdepth 2 -type f -name "*.dmg" | head -n 1)
          stapler validate "$file"
      - name: Check
        run: |
          ls -alh
          mkdir updates
          cp ./temp/*.dmg updates/
          echo "the updates is in ${{ github.workspace }}/updates"
          ls -alh updates
      - name: generate appcast (production only)
        if: env.IS_PRERELEASE == 'false'
        continue-on-error: true
        run: |
          pwd
          xcodebuild -resolvePackageDependencies
          cd $(ls -d ~/Library/Developer/Xcode/DerivedData/${{ env.SCHEME }}*/ | head -n 1)
          cd SourcePackages/artifacts/sparkle/Sparkle/bin
          echo "${{ secrets.SPARKLE_PRIVATE_KEY_GITOK }}" | ./generate_appcast --ed-key-file - ${{ github.workspace }}/updates
      - name: make appcast.xml (production only)
        if: env.IS_PRERELEASE == 'false'
        run: |
          pwd
          cd updates
          dmg_file=$(ls *.dmg 2>/dev/null | head -n 1)
          echo $dmg_file
          u="https://github.com/CofficLab/GitOK/releases/latest/download/$dmg_file" 
          echo $u
          sed -i '' "s|\(enclosure url=\"\)[^\"]*|\1$u|" "appcast.xml"
          mv appcast.xml ../appcast.xml
      - name: 发布 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          prerelease: ${{ env.IS_PRERELEASE }}
          files: |
            ./updates/*.dmg
            ./appcast.xml
      - name: 推送到仓库 (pro)
        if: env.IS_PRERELEASE == 'false'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: '🎨 CI: Update appcast.yml'
          commit_user_name: GitHub Action
          file_pattern: 'appcast.xml'
