name: Release

on:
  workflow_run:
    workflows:
      - 'Bump'
    types:
      - completed

permissions:
  contents: write

env:
  TAG: ${{ github.sha }}
  Identity: ''
  SCHEME: GitOK
  DESTINATION: 'generic/platform=macOS'
  ArchivePath: './my-app'
  BuildPath: './temp'
  BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  IS_PRERELEASE: true

jobs:
  build_with_signing:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: macos-15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 获取最新 tag
        id: get_tag
        run: |
          tag=$(git describe --tags --abbrev=0)
          echo "TAG=$tag" >> $GITHUB_ENV
          if [[ $tag == p* ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
          fi
      - name: Install the Apple certificate and provisioning profile
        env:
          P12_PASSWORD: ${{ secrets.BUILD_CERTIFICATE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64_GITOK_MACOS }}
          KEYCHAIN_PASSWORD: 'xxx'
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "${{ env.BUILD_CERTIFICATE_BASE64 }}" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: 生成 App Store Connect API 的 AuthKey
        run: |
          mkdir -p ./private_keys
          echo -n "${{ secrets.APP_STORE_CONNECT_KEY_BASE64 }}" | base64 --decode -o ./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8
      - run: security find-identity -v
      - name: Build
        run: xcodebuild -scheme ${{ env.SCHEME }} -configuration Release -derivedDataPath ${{ env.BuildPath }} clean build
      - name: find identity
        run: |
          i=$(security find-identity -v -p codesigning | grep '^[[:space:]]*1)' | awk -F'[(|)]' '{print $3}')
          echo "Identity=$i" >> $GITHUB_ENV
      - name: Codesign sparkle
        run: |
          codesign -f -s ${{ env.Identity }} -o runtime temp/Build/Products/Release/${{ env.SCHEME }}.app/Contents/Frameworks/Sparkle.framework/Versions/B/XPCServices/Installer.xpc
          codesign -f -s ${{ env.Identity }} -o runtime --preserve-metadata=entitlements temp/Build/Products/Release/${{ env.SCHEME }}.app/Contents/Frameworks/Sparkle.framework/Versions/B/XPCServices/Downloader.xpc
          codesign -f -s ${{ env.Identity }} -o runtime temp/Build/Products/Release/${{ env.SCHEME }}.app/Contents/Frameworks/Sparkle.framework/Versions/B/Autoupdate
          codesign -f -s ${{ env.Identity }} -o runtime temp/Build/Products/Release/${{ env.SCHEME }}.app/Contents/Frameworks/Sparkle.framework/Versions/B/Updater.app
          codesign -f -s ${{ env.Identity }} -o runtime temp/Build/Products/Release/${{ env.SCHEME }}.app/Contents/Frameworks/Sparkle.framework
      - name: Codesign
        run: codesign --force -s ${{ env.Identity }} --option=runtime temp/Build/Products/Release/${{ env.SCHEME }}.app
      - name: Codesign Check
        run: codesign -dv temp/Build/Products/Release/${{ env.SCHEME }}.app
      - name: Codesign Check 2
        continue-on-error: true
        run: codesign -vvv --deep --strict temp/Build/Products/Release/${{ env.SCHEME }}.app
      - name: Create DMG
        run: |
          npm i -g create-dmg
          create-dmg "temp/Build/Products/Release/${{ env.SCHEME }}.app"
          for file in *.dmg; do
              mv "$file" "${file// /-}"
          done
          ls -alh
      - name: Notary
        continue-on-error: true
        run: |
          file=$(find . -maxdepth 1 -type f -name "*.dmg" | head -n 1)
          xcrun notarytool submit "$file" \
            --key ./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8 \
            --key-id=${{ secrets.APP_STORE_CONNECT_KEY_ID }} \
            --issuer ${{ secrets.APP_STORE_CONNECT_KEY_ISSER_ID }} \
            --wait \
            --timeout 10m
          stapler staple "$file"
      - name: 公证结果
        continue-on-error: true
        run: |
          file=$(find . -maxdepth 1 -type f -name "*.dmg" | head -n 1)
          stapler validate "$file"
      - name: Check
        run: |
          ls -alh
          mkdir updates
          cp *.dmg updates/
          echo "the updates is in ${{ github.workspace }}/updates"
          ls -alh updates
      - name: generate appcast (production only)
        if: startsWith(github.ref, 'refs/tags/v')
        continue-on-error: true
        run: |
          pwd
          xcodebuild -resolvePackageDependencies
          cd $(ls -d ~/Library/Developer/Xcode/DerivedData/${{ env.SCHEME }}*/ | head -n 1)
          cd SourcePackages/artifacts/sparkle/Sparkle/bin
          echo "${{ secrets.SPARKLE_PRIVATE_KEY_GITOK }}" | ./generate_appcast --ed-key-file - ${{ github.workspace }}/updates
      - name: make appcast.xml (production only)
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          pwd
          cd updates
          dmg_file=$(ls *.dmg 2>/dev/null | head -n 1)
          echo $dmg_file
          u="https://github.com/CofficLab/GitOK/releases/latest/download/$dmg_file" 
          echo $u
          sed -i '' "s|\(enclosure url=\"\)[^\"]*|\1$u|" "appcast.xml"
          mv appcast.xml ../appcast.xml
      - name: 发布 Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          prerelease: ${{ env.IS_PRERELEASE }}
          files: |
            ./updates/*.dmg
            ./appcast.xml
      - name: 推送到仓库 (pro)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: '🎨 Update appcast.yml'
          commit_user_name: GitHub Action
          file_pattern: 'appcast.xml'
